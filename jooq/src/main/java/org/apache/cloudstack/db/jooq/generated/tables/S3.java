/**
 * This class is generated by jOOQ
 */
package org.apache.cloudstack.db.jooq.generated.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.2.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S3 extends org.jooq.impl.TableImpl<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record> {

	private static final long serialVersionUID = 1088957651;

	/**
	 * The singleton instance of <code>cloud.s3</code>
	 */
	public static final org.apache.cloudstack.db.jooq.generated.tables.S3 S3 = new org.apache.cloudstack.db.jooq.generated.tables.S3();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record> getRecordType() {
		return org.apache.cloudstack.db.jooq.generated.tables.records.S3Record.class;
	}

	/**
	 * The column <code>cloud.s3.id</code>. id
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.s3.uuid</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(40), this);

	/**
	 * The column <code>cloud.s3.access_key</code>.  The S3 access key
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.String> ACCESS_KEY = createField("access_key", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this);

	/**
	 * The column <code>cloud.s3.secret_key</code>.  The S3 secret key
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.String> SECRET_KEY = createField("secret_key", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this);

	/**
	 * The column <code>cloud.s3.end_point</code>.  The S3 host
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.String> END_POINT = createField("end_point", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this);

	/**
	 * The column <code>cloud.s3.bucket</code>.  The S3 host
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.String> BUCKET = createField("bucket", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this);

	/**
	 * The column <code>cloud.s3.https</code>.  Flag indicating whether or not to connect over HTTPS
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Byte> HTTPS = createField("https", org.jooq.impl.SQLDataType.TINYINT, this);

	/**
	 * The column <code>cloud.s3.connection_timeout</code>.  The amount of time to wait (in milliseconds) when initially establishing a connection before giving up and timing out.
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Integer> CONNECTION_TIMEOUT = createField("connection_timeout", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The column <code>cloud.s3.max_error_retry</code>.  The maximum number of retry attempts for failed retryable requests (ex: 5xx error responses from services).
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Integer> MAX_ERROR_RETRY = createField("max_error_retry", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The column <code>cloud.s3.socket_timeout</code>.  The amount of time to wait (in milliseconds) for data to be transfered over an established, open connection before the connection times out and is closed.
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Integer> SOCKET_TIMEOUT = createField("socket_timeout", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * The column <code>cloud.s3.created</code>. date the s3 first signed on
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * Create a <code>cloud.s3</code> table reference
	 */
	public S3() {
		super("s3", org.apache.cloudstack.db.jooq.generated.Cloud.CLOUD);
	}

	/**
	 * Create an aliased <code>cloud.s3</code> table reference
	 */
	public S3(java.lang.String alias) {
		super(alias, org.apache.cloudstack.db.jooq.generated.Cloud.CLOUD, org.apache.cloudstack.db.jooq.generated.tables.S3.S3);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record, java.lang.Long> getIdentity() {
		return org.apache.cloudstack.db.jooq.generated.Keys.IDENTITY_S3;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record> getPrimaryKey() {
		return org.apache.cloudstack.db.jooq.generated.Keys.KEY_S3_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.S3Record>>asList(org.apache.cloudstack.db.jooq.generated.Keys.KEY_S3_PRIMARY, org.apache.cloudstack.db.jooq.generated.Keys.KEY_S3_UC_S3__UUID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.apache.cloudstack.db.jooq.generated.tables.S3 as(java.lang.String alias) {
		return new org.apache.cloudstack.db.jooq.generated.tables.S3(alias);
	}
}
