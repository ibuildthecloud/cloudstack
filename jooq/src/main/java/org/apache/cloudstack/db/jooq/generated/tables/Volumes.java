/**
 * This class is generated by jOOQ
 */
package org.apache.cloudstack.db.jooq.generated.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.2.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Volumes extends org.jooq.impl.TableImpl<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord> {

	private static final long serialVersionUID = 2032572309;

	/**
	 * The singleton instance of <code>cloud.volumes</code>
	 */
	public static final org.apache.cloudstack.db.jooq.generated.tables.Volumes VOLUMES = new org.apache.cloudstack.db.jooq.generated.tables.Volumes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord> getRecordType() {
		return org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord.class;
	}

	/**
	 * The column <code>cloud.volumes.id</code>. Primary Key
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.account_id</code>. owner.  foreign key to account table
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.domain_id</code>. the domain that the owner belongs to
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> DOMAIN_ID = createField("domain_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.pool_id</code>. pool it belongs to. foreign key to storage_pool table
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> POOL_ID = createField("pool_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.last_pool_id</code>. last pool it belongs to.
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> LAST_POOL_ID = createField("last_pool_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.instance_id</code>. vm instance it belongs to. foreign key to vm_instance table
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> INSTANCE_ID = createField("instance_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.device_id</code>. which device inside vm instance it is 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> DEVICE_ID = createField("device_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.name</code>. A user specified name for the volume
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.uuid</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(40), this);

	/**
	 * The column <code>cloud.volumes.size</code>. total size
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.folder</code>. The folder where the volume is saved
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> FOLDER = createField("folder", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.path</code>. Path
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.pod_id</code>. pod this volume belongs to
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> POD_ID = createField("pod_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.data_center_id</code>. data center this volume belongs to
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> DATA_CENTER_ID = createField("data_center_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.iscsi_name</code>. iscsi target name
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> ISCSI_NAME = createField("iscsi_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.host_ip</code>. host ip address for convenience
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> HOST_IP = createField("host_ip", org.jooq.impl.SQLDataType.CHAR.length(40), this);

	/**
	 * The column <code>cloud.volumes.volume_type</code>. root, swap or data
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> VOLUME_TYPE = createField("volume_type", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this);

	/**
	 * The column <code>cloud.volumes.pool_type</code>. type of the pool
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> POOL_TYPE = createField("pool_type", org.jooq.impl.SQLDataType.VARCHAR.length(64), this);

	/**
	 * The column <code>cloud.volumes.disk_offering_id</code>. can be null for system VMs
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> DISK_OFFERING_ID = createField("disk_offering_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.volumes.template_id</code>. fk to vm_template.id
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> TEMPLATE_ID = createField("template_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.first_snapshot_backup_uuid</code>. The first snapshot that was ever taken for this volume
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> FIRST_SNAPSHOT_BACKUP_UUID = createField("first_snapshot_backup_uuid", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.recreatable</code>. Is this volume recreatable?
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Byte> RECREATABLE = createField("recreatable", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this);

	/**
	 * The column <code>cloud.volumes.created</code>. Date Created
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.volumes.attached</code>. Date Attached
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.sql.Timestamp> ATTACHED = createField("attached", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.volumes.updated</code>. Date updated for attach/detach
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.sql.Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.volumes.removed</code>. Date removed.  not null if removed
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.sql.Timestamp> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.volumes.state</code>. State machine
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(32), this);

	/**
	 * The column <code>cloud.volumes.chain_info</code>. save possible disk chain info in primary storage
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> CHAIN_INFO = createField("chain_info", org.jooq.impl.SQLDataType.CLOB.length(65535), this);

	/**
	 * The column <code>cloud.volumes.update_count</code>. date state was updated
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> UPDATE_COUNT = createField("update_count", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this);

	/**
	 * The column <code>cloud.volumes.disk_type</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> DISK_TYPE = createField("disk_type", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.vm_snapshot_chain_size</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> VM_SNAPSHOT_CHAIN_SIZE = createField("vm_snapshot_chain_size", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.iso_id</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> ISO_ID = createField("iso_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.display_volume</code>. Should volume be displayed to the end user
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Byte> DISPLAY_VOLUME = createField("display_volume", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this);

	/**
	 * The column <code>cloud.volumes.format</code>. volume format
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.volumes.min_iops</code>. Minimum IOPS
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> MIN_IOPS = createField("min_iops", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.volumes.max_iops</code>. Maximum IOPS
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> MAX_IOPS = createField("max_iops", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * Create a <code>cloud.volumes</code> table reference
	 */
	public Volumes() {
		super("volumes", org.apache.cloudstack.db.jooq.generated.Cloud.CLOUD);
	}

	/**
	 * Create an aliased <code>cloud.volumes</code> table reference
	 */
	public Volumes(java.lang.String alias) {
		super(alias, org.apache.cloudstack.db.jooq.generated.Cloud.CLOUD, org.apache.cloudstack.db.jooq.generated.tables.Volumes.VOLUMES);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, java.lang.Long> getIdentity() {
		return org.apache.cloudstack.db.jooq.generated.Keys.IDENTITY_VOLUMES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord> getPrimaryKey() {
		return org.apache.cloudstack.db.jooq.generated.Keys.KEY_VOLUMES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord>>asList(org.apache.cloudstack.db.jooq.generated.Keys.KEY_VOLUMES_PRIMARY, org.apache.cloudstack.db.jooq.generated.Keys.KEY_VOLUMES_UC_VOLUMES__UUID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<org.apache.cloudstack.db.jooq.generated.tables.records.VolumesRecord, ?>>asList(org.apache.cloudstack.db.jooq.generated.Keys.FK_VOLUMES__POOL_ID, org.apache.cloudstack.db.jooq.generated.Keys.FK_VOLUMES__INSTANCE_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.apache.cloudstack.db.jooq.generated.tables.Volumes as(java.lang.String alias) {
		return new org.apache.cloudstack.db.jooq.generated.tables.Volumes(alias);
	}
}
