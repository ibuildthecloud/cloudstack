/**
 * This class is generated by jOOQ
 */
package org.apache.cloudstack.db.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.2.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Snapshots extends org.jooq.impl.TableImpl<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord> {

	private static final long serialVersionUID = -777177997;

	/**
	 * The singleton instance of <code>cloud.snapshots</code>
	 */
	public static final org.apache.cloudstack.db.jooq.tables.Snapshots SNAPSHOTS = new org.apache.cloudstack.db.jooq.tables.Snapshots();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord> getRecordType() {
		return org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord.class;
	}

	/**
	 * The column <code>cloud.snapshots.id</code>. Primary Key
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.data_center_id</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> DATA_CENTER_ID = createField("data_center_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.account_id</code>. owner.  foreign key to account table
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.domain_id</code>. the domain that the owner belongs to
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> DOMAIN_ID = createField("domain_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.volume_id</code>. volume it belongs to. foreign key to volume table
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> VOLUME_ID = createField("volume_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.disk_offering_id</code>. from original volume
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> DISK_OFFERING_ID = createField("disk_offering_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.status</code>. snapshot creation status
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(32), this);

	/**
	 * The column <code>cloud.snapshots.path</code>. Path
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.snapshots.name</code>. snapshot name
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.uuid</code>. 
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(40), this);

	/**
	 * The column <code>cloud.snapshots.snapshot_type</code>. type of snapshot, e.g. manual, recurring
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Integer> SNAPSHOT_TYPE = createField("snapshot_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.type_description</code>. description of the type of snapshot, e.g. manual, recurring
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> TYPE_DESCRIPTION = createField("type_description", org.jooq.impl.SQLDataType.VARCHAR.length(25), this);

	/**
	 * The column <code>cloud.snapshots.size</code>. original disk size of snapshot
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.created</code>. Date Created
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.snapshots.removed</code>. Date removed.  not null if removed
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.sql.Timestamp> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this);

	/**
	 * The column <code>cloud.snapshots.backup_snap_id</code>. Back up uuid of the snapshot
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> BACKUP_SNAP_ID = createField("backup_snap_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this);

	/**
	 * The column <code>cloud.snapshots.swift_id</code>. which swift
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> SWIFT_ID = createField("swift_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.snapshots.sechost_id</code>. secondary storage host id
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> SECHOST_ID = createField("sechost_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.snapshots.prev_snap_id</code>. Id of the most recent snapshot
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> PREV_SNAP_ID = createField("prev_snap_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cloud.snapshots.hypervisor_type</code>. hypervisor that the snapshot was taken under
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> HYPERVISOR_TYPE = createField("hypervisor_type", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this);

	/**
	 * The column <code>cloud.snapshots.version</code>. snapshot version
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR.length(32), this);

	/**
	 * The column <code>cloud.snapshots.s3_id</code>. S3 to which this snapshot will be stored
	 */
	public final org.jooq.TableField<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> S3_ID = createField("s3_id", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * Create a <code>cloud.snapshots</code> table reference
	 */
	public Snapshots() {
		super("snapshots", org.apache.cloudstack.db.jooq.Cloud.CLOUD);
	}

	/**
	 * Create an aliased <code>cloud.snapshots</code> table reference
	 */
	public Snapshots(java.lang.String alias) {
		super(alias, org.apache.cloudstack.db.jooq.Cloud.CLOUD, org.apache.cloudstack.db.jooq.tables.Snapshots.SNAPSHOTS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, java.lang.Long> getIdentity() {
		return org.apache.cloudstack.db.jooq.Keys.IDENTITY_SNAPSHOTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord> getPrimaryKey() {
		return org.apache.cloudstack.db.jooq.Keys.KEY_SNAPSHOTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord>>asList(org.apache.cloudstack.db.jooq.Keys.KEY_SNAPSHOTS_PRIMARY, org.apache.cloudstack.db.jooq.Keys.KEY_SNAPSHOTS_ID, org.apache.cloudstack.db.jooq.Keys.KEY_SNAPSHOTS_UC_SNAPSHOTS__UUID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<org.apache.cloudstack.db.jooq.tables.records.SnapshotsRecord, ?>>asList(org.apache.cloudstack.db.jooq.Keys.FK_SNAPSHOTS__ACCOUNT_ID, org.apache.cloudstack.db.jooq.Keys.FK_SNAPSHOTS__S3_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.apache.cloudstack.db.jooq.tables.Snapshots as(java.lang.String alias) {
		return new org.apache.cloudstack.db.jooq.tables.Snapshots(alias);
	}
}
