/**
 * This class is generated by jOOQ
 */
package org.apache.cloudstack.db.jooq.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.2.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
@javax.persistence.Entity
@javax.persistence.Table(name = "s3", schema = "cloud")
public class S3Record extends org.jooq.impl.UpdatableRecordImpl<org.apache.cloudstack.db.jooq.tables.records.S3Record> implements org.jooq.Record11<java.lang.Long, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Byte, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.sql.Timestamp> {

	private static final long serialVersionUID = -1201030435;

	/**
	 * Setter for <code>cloud.s3.id</code>. id
	 */
	public void setId(java.lang.Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>cloud.s3.id</code>. id
	 */
	@javax.persistence.Id
	@javax.persistence.Column(name = "id", unique = true, nullable = false, precision = 20)
	public java.lang.Long getId() {
		return (java.lang.Long) getValue(0);
	}

	/**
	 * Setter for <code>cloud.s3.uuid</code>. 
	 */
	public void setUuid(java.lang.String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>cloud.s3.uuid</code>. 
	 */
	@javax.persistence.Column(name = "uuid", unique = true, length = 40)
	public java.lang.String getUuid() {
		return (java.lang.String) getValue(1);
	}

	/**
	 * Setter for <code>cloud.s3.access_key</code>.  The S3 access key
	 */
	public void setAccessKey(java.lang.String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>cloud.s3.access_key</code>.  The S3 access key
	 */
	@javax.persistence.Column(name = "access_key", nullable = false, length = 20)
	public java.lang.String getAccessKey() {
		return (java.lang.String) getValue(2);
	}

	/**
	 * Setter for <code>cloud.s3.secret_key</code>.  The S3 secret key
	 */
	public void setSecretKey(java.lang.String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>cloud.s3.secret_key</code>.  The S3 secret key
	 */
	@javax.persistence.Column(name = "secret_key", nullable = false, length = 40)
	public java.lang.String getSecretKey() {
		return (java.lang.String) getValue(3);
	}

	/**
	 * Setter for <code>cloud.s3.end_point</code>.  The S3 host
	 */
	public void setEndPoint(java.lang.String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>cloud.s3.end_point</code>.  The S3 host
	 */
	@javax.persistence.Column(name = "end_point", length = 1024)
	public java.lang.String getEndPoint() {
		return (java.lang.String) getValue(4);
	}

	/**
	 * Setter for <code>cloud.s3.bucket</code>.  The S3 host
	 */
	public void setBucket(java.lang.String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>cloud.s3.bucket</code>.  The S3 host
	 */
	@javax.persistence.Column(name = "bucket", nullable = false, length = 63)
	public java.lang.String getBucket() {
		return (java.lang.String) getValue(5);
	}

	/**
	 * Setter for <code>cloud.s3.https</code>.  Flag indicating whether or not to connect over HTTPS
	 */
	public void setHttps(java.lang.Byte value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>cloud.s3.https</code>.  Flag indicating whether or not to connect over HTTPS
	 */
	@javax.persistence.Column(name = "https", precision = 3)
	public java.lang.Byte getHttps() {
		return (java.lang.Byte) getValue(6);
	}

	/**
	 * Setter for <code>cloud.s3.connection_timeout</code>.  The amount of time to wait (in milliseconds) when initially establishing a connection before giving up and timing out.
	 */
	public void setConnectionTimeout(java.lang.Integer value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>cloud.s3.connection_timeout</code>.  The amount of time to wait (in milliseconds) when initially establishing a connection before giving up and timing out.
	 */
	@javax.persistence.Column(name = "connection_timeout", precision = 10)
	public java.lang.Integer getConnectionTimeout() {
		return (java.lang.Integer) getValue(7);
	}

	/**
	 * Setter for <code>cloud.s3.max_error_retry</code>.  The maximum number of retry attempts for failed retryable requests (ex: 5xx error responses from services).
	 */
	public void setMaxErrorRetry(java.lang.Integer value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>cloud.s3.max_error_retry</code>.  The maximum number of retry attempts for failed retryable requests (ex: 5xx error responses from services).
	 */
	@javax.persistence.Column(name = "max_error_retry", precision = 10)
	public java.lang.Integer getMaxErrorRetry() {
		return (java.lang.Integer) getValue(8);
	}

	/**
	 * Setter for <code>cloud.s3.socket_timeout</code>.  The amount of time to wait (in milliseconds) for data to be transfered over an established, open connection before the connection times out and is closed.
	 */
	public void setSocketTimeout(java.lang.Integer value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>cloud.s3.socket_timeout</code>.  The amount of time to wait (in milliseconds) for data to be transfered over an established, open connection before the connection times out and is closed.
	 */
	@javax.persistence.Column(name = "socket_timeout", precision = 10)
	public java.lang.Integer getSocketTimeout() {
		return (java.lang.Integer) getValue(9);
	}

	/**
	 * Setter for <code>cloud.s3.created</code>. date the s3 first signed on
	 */
	public void setCreated(java.sql.Timestamp value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>cloud.s3.created</code>. date the s3 first signed on
	 */
	@javax.persistence.Column(name = "created")
	public java.sql.Timestamp getCreated() {
		return (java.sql.Timestamp) getValue(10);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Record1<java.lang.Long> key() {
		return (org.jooq.Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record11 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row11<java.lang.Long, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Byte, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.sql.Timestamp> fieldsRow() {
		return (org.jooq.Row11) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row11<java.lang.Long, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Byte, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.sql.Timestamp> valuesRow() {
		return (org.jooq.Row11) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Long> field1() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field2() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.UUID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field3() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.ACCESS_KEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field4() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.SECRET_KEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field5() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.END_POINT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field6() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.BUCKET;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Byte> field7() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.HTTPS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field8() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.CONNECTION_TIMEOUT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field9() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.MAX_ERROR_RETRY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field10() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.SOCKET_TIMEOUT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field11() {
		return org.apache.cloudstack.db.jooq.tables.S3.S3.CREATED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value2() {
		return getUuid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value3() {
		return getAccessKey();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value4() {
		return getSecretKey();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value5() {
		return getEndPoint();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value6() {
		return getBucket();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Byte value7() {
		return getHttps();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value8() {
		return getConnectionTimeout();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value9() {
		return getMaxErrorRetry();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value10() {
		return getSocketTimeout();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value11() {
		return getCreated();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached S3Record
	 */
	public S3Record() {
		super(org.apache.cloudstack.db.jooq.tables.S3.S3);
	}

	/**
	 * Create a detached, initialised S3Record
	 */
	public S3Record(java.lang.Long id, java.lang.String uuid, java.lang.String accessKey, java.lang.String secretKey, java.lang.String endPoint, java.lang.String bucket, java.lang.Byte https, java.lang.Integer connectionTimeout, java.lang.Integer maxErrorRetry, java.lang.Integer socketTimeout, java.sql.Timestamp created) {
		super(org.apache.cloudstack.db.jooq.tables.S3.S3);

		setValue(0, id);
		setValue(1, uuid);
		setValue(2, accessKey);
		setValue(3, secretKey);
		setValue(4, endPoint);
		setValue(5, bucket);
		setValue(6, https);
		setValue(7, connectionTimeout);
		setValue(8, maxErrorRetry);
		setValue(9, socketTimeout);
		setValue(10, created);
	}
}
